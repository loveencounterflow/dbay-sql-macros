{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY-SQL-MACROS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ equals }                = GUY.samesame\n# new_xregex                = require 'xregexp'\n# E                         = require '../../../apps/dbay/lib/errors'\nsql_lexer                 = require 'dbay-sql-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass DBay_sqlm_error extends Error\n  constructor: ( ref, message ) ->\n    super()\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined ### always return `undefined` from constructor ###\n\n#===========================================================================================================\nclass DBay_sqlm_internal_error            extends DBay_sqlm_error\n  constructor: ( ref, message )     -> super ref, message\nclass DBay_sqlm_TOBESPECIFIED_error            extends DBay_sqlm_error\n  constructor: ( ref, message )     -> super ref, message\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass DBay_sqlx # extends ( require H.dbay_path ).DBay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    GUY.props.hide @, 'types',          require './types'\n    GUY.props.hide @, '_declarations',  {}\n    @cfg = @types.create.dbm_constructor_cfg cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  declare: ( sqlx ) =>\n    @types.validate.nonempty.text sqlx\n    parameters_re           = null\n    @cfg.name_re.lastIndex  = 0\n    #.......................................................................................................\n    unless ( match = sqlx.match @cfg.name_re )?\n      throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@1^', \"syntax error in #{rpr sqlx}\"\n    name                    = match[ 0 ]\n    #.......................................................................................................\n    if sqlx[ @cfg.name_re.lastIndex ] is '('\n      parameters_re           = /\\(\\s*(?<parameters>[^)]*?)\\s*\\)\\s*=\\s*/yu\n      parameters_re.lastIndex = @cfg.name_re.lastIndex\n      unless ( match = sqlx.match parameters_re )?\n        throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@2^', \"syntax error in #{rpr sqlx}\"\n      { parameters, }         = match.groups\n      parameters              = parameters.split /\\s*,\\s*/u\n      parameters              = [] if equals parameters, [ '', ]\n    else\n      ### extension for declaration, call w/out parentheses left for later ###\n      # throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@3^', \"syntax error: parentheses are obligatory but missing in #{rpr sqlx}\"\n      parameters              = []\n    #.......................................................................................................\n    current_idx                 = parameters_re?.lastIndex ? @cfg.name_re.lastIndex\n    body                        = sqlx[ current_idx ... ].replace /\\s*;\\s*$/u, ''\n    arity                       = parameters.length\n    @_declare { name, parameters, arity, body, }\n  #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( cfg ) ->\n    if @_declarations[ cfg.name ]?\n      throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@2^', \"can not re-declare #{rpr cfg.name}\"\n    cfg.parameter_res           = ( @_get_parameter_re p for p in cfg.parameters )\n    @_declarations[ cfg.name ]  = cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT see https://shiba1014.medium.com/regex-word-boundaries-with-unicode-207794f6e7ed\n  for Unicode-compliant alternatives to the trailing `\\b`; OTOH we're dealing w/ mostly-ASCII SQL here ###\n  _get_parameter_re: ( parameter ) -> /// (?<! \\\\ ) #{GUY.str.escape_for_regex parameter} \\b ///gu\n\n  #---------------------------------------------------------------------------------------------------------\n  resolve: ( sqlx ) =>\n    @types.validate.nonempty.text sqlx\n    sql_before                      = sqlx\n    position                        = 0\n    R                               = []\n    @cfg._global_name_re.lastIndex  = 0\n    for match from sqlx.matchAll @cfg._global_name_re\n      name      = match[ 0 ]\n      #.....................................................................................................\n      unless ( declaration = @_declarations[ name ] )?\n        throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@4^', \"unknown macro #{rpr name}\"\n      #.....................................................................................................\n      last_idx  = match.index + name.length\n      R.push sqlx[ position ... match.index ]\n      continue unless sqlx[ last_idx ] is '('\n      tail            = sqlx[ last_idx ... ]\n      { values\n        stop_idx  }   = @_find_arguments tail\n      call_arity      = values.length\n      #.....................................................................................................\n      unless call_arity is declaration.arity\n        throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@5^', \"expected #{declaration.arity} argument(s), got #{call_arity}\"\n      #.....................................................................................................\n      ### NOTE recursion must happen here ###\n      { body }        = declaration\n      for parameter_re, parameter_idx in declaration.parameter_res\n        ### TAINT must use lexer to make replacements ###\n        debug '^56-1^', rpr values[ parameter_idx ]\n        debug '^56-1^', rpr @resolve values[ parameter_idx ]\n        body = body.replace parameter_re, @resolve values[ parameter_idx ]\n        # body = body.replace parameter_re, values[ parameter_idx ]\n      #.....................................................................................................\n      ### TAINT ^hardwired-sigil^ this hardwires `@` as sigil ###\n      body = body.replace /\\\\@/gu, '@'\n      R.push body\n      R.push tail[ stop_idx .. ]\n    return if R.length is 0 then sqlx else R.join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _find_arguments: ( sqlx ) ->\n    unless sqlx[ 0 ] is '('\n      throw new DBay_sqlm_internal_error '^dbay/sqlx@6^', \"source must start with left bracket, got #{rpr sqlx}\"\n    sqlx    = sqlx.trim()\n    values  = []\n    R       = { values, stop_idx: null, }\n    #.......................................................................................................\n    level       = 0\n    comma_idxs  = [ { start: null, stop: 1, }, ]\n    for token in sql_lexer.tokenize sqlx\n      switch token.type\n        when 'left_paren'\n          level++\n        when 'right_paren'\n          level--\n          if level < 1\n            comma_idxs.push { start: token.idx, stop: null, }\n            break\n        when 'comma'\n          if level is 1\n            comma_idxs.push { start: token.idx, stop: token.idx + token.text.length, }\n        else\n          null\n    R.stop_idx = ( comma_idxs.at -1 ).start + 1 ### NOTE should be Unicode-safe b/c we know it's `)` ###\n    #.......................................................................................................\n    for idx in [ 1 ... comma_idxs.length ]\n      start = comma_idxs[ idx - 1 ].stop\n      stop  = comma_idxs[ idx     ].start\n      values.push sqlx[ start ... stop ].trim()\n    #.......................................................................................................\n    values.pop() if equals values, [ '', ]\n    return R\n\n\n############################################################################################################\nmodule.exports = { DBay_sqlx, DBay_sqlm_error, DBay_sqlm_TOBESPECIFIED_error, }\n"
  ]
}