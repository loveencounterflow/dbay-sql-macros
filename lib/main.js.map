{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ equals }                = types\nnew_xregex                = require 'xregexp'\n# E                         = require '../../../apps/dbay/lib/errors'\nsql_lexer                 = require 'dbay-sql-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass DBay_sqlm_error extends Error\n  constructor: ( ref, message ) ->\n    super()\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined ### always return `undefined` from constructor ###\n\n#===========================================================================================================\nclass DBay_sqlm_TOBESPECIFIED_error            extends DBay_sqlm_error\n  constructor: ( ref, message )     -> super ref, message\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass DBay_sqlx # extends ( require H.dbay_path ).DBay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    # super P...\n    GUY.props.hide @, '_sqlx_declarations', {}\n    GUY.props.hide @, '_sqlx_cmd_re',       null\n    GUY.props.hide @, 'types',              types\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  declare: ( sqlx ) ->\n    @types.validate.nonempty.text sqlx\n    parameters_re           = null\n    #.......................................................................................................\n    name_re                 = /^(?<name>@[^\\s^(]+)/y\n    unless ( match = sqlx.match name_re )?\n      throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@1^', \"syntax error in #{rpr sqlx}\"\n    { name, }               = match.groups\n    #.......................................................................................................\n    if sqlx[ name_re.lastIndex ] is '('\n      parameters_re           = /\\(\\s*(?<parameters>[^)]*?)\\s*\\)\\s*=\\s*/y\n      parameters_re.lastIndex = name_re.lastIndex\n      unless ( match = sqlx.match parameters_re )?\n        throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@2^', \"syntax error in #{rpr sqlx}\"\n      { parameters, }         = match.groups\n      parameters              = parameters.split /\\s*,\\s*/\n      parameters              = [] if equals parameters, [ '', ]\n    else\n      ### extension for declaration, call w/out parentheses left for later ###\n      # throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@3^', \"syntax error: parentheses are obligatory but missing in #{rpr sqlx}\"\n      parameters              = []\n    #.......................................................................................................\n    current_idx                 = parameters_re?.lastIndex ? name_re.lastIndex\n    body                        = sqlx[ current_idx ... ].replace /\\s*;\\s*$/, ''\n    arity                       = parameters.length\n    @_sqlx_declare { name, parameters, arity, body, }\n  #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_get_cmd_re: ->\n    return R if ( R = @_sqlx_cmd_re )?\n    names = ( Object.keys @_sqlx_declarations ).sort ( a, b ) ->\n      a = ( Array.from a ).length\n      b = ( Array.from b ).length\n      return +1 if a > b\n      return -1 if a < b\n      return 0\n    names = ( @_escape_literal_for_regex name for name in names ).join '|'\n    return @_sqlx_cmd_re = /// (?<= \\W | ^ ) (?<name> #{names} ) (?= \\W | $ ) (?<tail> .* ) $ ///g\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://stackoverflow.com/a/6969486/7568091 and\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n  _escape_literal_for_regex: ( literal ) -> literal.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_declare: ( cfg ) ->\n    if @_sqlx_declarations[ cfg.name ]?\n      throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@2^', \"can not re-declare #{rpr cfg.name}\"\n    @_sqlx_cmd_re                   = null\n    @_sqlx_declarations[ cfg.name ] = cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  resolve: ( sqlx ) ->\n    @types.validate.nonempty.text sqlx\n    sql_before  = sqlx\n    count       = 0\n    #.......................................................................................................\n    loop\n      break if count++ > 10_000 ### NOTE to avoid deadlock, just in case ###\n      sql_after = sql_before.replace @_sqlx_get_cmd_re(), ( _matches..., idx, _sqlx, groups ) =>\n        # debug '^546^', rpr sqlx[ idx ... idx + groups.name.length ]\n        { name\n          tail  } = groups\n        #...................................................................................................\n        unless ( declaration = @_sqlx_declarations[ name ] )?\n          ### NOTE should never happen as we always re-compile pattern from declaration keys ###\n          throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@4^', \"unknown name #{rpr name}\"\n        #...................................................................................................\n        if tail.startsWith '('\n          matches     = new_xregex.matchRecursive tail, '\\\\(', '\\\\)', '', \\\n            { escapeChar: '\\\\', unbalanced: 'skip-lazy', valueNames: [ 'ignore', 'left', 'center', 'right', ], }\n          [ left\n            center\n            right   ] = matches\n          tail        = tail[ right.end ... ]\n          values      = @_find_arguments center.value\n          call_arity  = values.length\n        else\n          call_arity  = 0\n        #...................................................................................................\n        unless call_arity is declaration.arity\n          throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@5^', \"expected #{declaration.arity} argument(s), got #{call_arity}\"\n        #...................................................................................................\n        R = declaration.body\n        for parameter, idx in declaration.parameters\n          value = values[ idx ]\n          R = R.replace ///#{parameter}///g, value\n        return R + tail\n      break if sql_after is sql_before\n      sql_before = sql_after\n    #.......................................................................................................\n    return sql_after\n\n  #---------------------------------------------------------------------------------------------------------\n  _find_arguments: ( sqlx ) ->\n    sqlx    = sqlx.trim()\n    R       = []\n    #.......................................................................................................\n    level       = 0\n    comma_idxs  = [ { start: null, stop: 0, }, ]\n    for token in sql_lexer.tokenize sqlx\n      switch token.type\n        when 'left_paren'\n          level++\n        when 'right_paren'\n          level--\n        when 'comma'\n          if level is 0\n            comma_idxs.push { start: token.idx, stop: token.idx + token.text.length, }\n        else\n          null\n    comma_idxs.push { start: sqlx.length, stop: null, }\n    #.......................................................................................................\n    for idx in [ 1 ... comma_idxs.length ]\n      start = comma_idxs[ idx - 1 ].stop\n      stop  = comma_idxs[ idx     ].start\n      R.push sqlx[ start ... stop ].trim()\n    #.......................................................................................................\n    R = [] if equals R, [ '', ]\n    return R\n\n\n############################################################################################################\nmodule.exports = { DBay_sqlx, DBay_sqlm_error, DBay_sqlm_TOBESPECIFIED_error, }\n"
  ]
}