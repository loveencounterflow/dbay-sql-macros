{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DBAY/sqlx'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ equals }                = types\nnew_xregex                = require 'xregexp'\n# E                         = require '../../../apps/dbay/lib/errors'\nsql_lexer                 = require 'dbay-sql-lexer'\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass DBay_sqlm_error extends Error\n  constructor: ( ref, message ) ->\n    super()\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined ### always return `undefined` from constructor ###\n\n#===========================================================================================================\nclass DBay_sqlm_TOBESPECIFIED_error            extends DBay_sqlm_error\n  constructor: ( ref, message )     -> super ref, message\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass DBay_sqlx # extends ( require H.dbay_path ).DBay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    # super P...\n    GUY.props.hide @, '_sqlx_declarations', {}\n    GUY.props.hide @, '_sqlx_cmd_re',       null\n    GUY.props.hide @, 'types',              types\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  declare: ( sqlx ) ->\n    @types.validate.nonempty.text sqlx\n    parameters_re           = null\n    #.......................................................................................................\n    name_re                 = /^(?<name>@[^\\s^(]+)/y\n    unless ( match = sqlx.match name_re )?\n      throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@1^', \"syntax error in #{rpr sqlx}\"\n    { name, }               = match.groups\n    #.......................................................................................................\n    if sqlx[ name_re.lastIndex ] is '('\n      parameters_re           = /\\(\\s*(?<parameters>[^)]*?)\\s*\\)\\s*=\\s*/y\n      parameters_re.lastIndex = name_re.lastIndex\n      unless ( match = sqlx.match parameters_re )?\n        throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@2^', \"syntax error in #{rpr sqlx}\"\n      { parameters, }         = match.groups\n      parameters              = parameters.split /\\s*,\\s*/\n      parameters              = [] if equals parameters, [ '', ]\n    else\n      ### extension for declaration, call w/out parentheses left for later ###\n      # throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@3^', \"syntax error: parentheses are obligatory but missing in #{rpr sqlx}\"\n      parameters              = []\n    #.......................................................................................................\n    current_idx                 = parameters_re?.lastIndex ? name_re.lastIndex\n    body                        = sqlx[ current_idx ... ].replace /\\s*;\\s*$/, ''\n    arity                       = parameters.length\n    @_sqlx_declare { name, parameters, arity, body, }\n  #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_get_cmd_re: ->\n    return R if ( R = @_sqlx_cmd_re )?\n    names = ( Object.keys @_sqlx_declarations ).sort ( a, b ) ->\n      a = ( Array.from a ).length\n      b = ( Array.from b ).length\n      return +1 if a > b\n      return -1 if a < b\n      return 0\n    names = ( @_escape_literal_for_regex name for name in names ).join '|'\n    return @_sqlx_cmd_re = /// (?<= \\W | ^ ) (?<name> #{names} ) (?= \\W | $ ) (?<tail> .* ) $ ///g\n\n  #---------------------------------------------------------------------------------------------------------\n  ### thx to https://stackoverflow.com/a/6969486/7568091 and\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping ###\n  _escape_literal_for_regex: ( literal ) -> literal.replace /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'\n\n  #---------------------------------------------------------------------------------------------------------\n  _sqlx_declare: ( cfg ) ->\n    if @_sqlx_declarations[ cfg.name ]?\n      throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@2^', \"can not re-declare #{rpr cfg.name}\"\n    @_sqlx_cmd_re                   = null\n    @_sqlx_declarations[ cfg.name ] = cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  resolve: ( sqlx ) ->\n    @types.validate.nonempty.text sqlx\n    sql_before  = sqlx\n    count       = 0\n    #.......................................................................................................\n    loop\n      break if count++ > 10_000 ### NOTE to avoid deadlock, just in case ###\n      sql_after = sql_before.replace @_sqlx_get_cmd_re(), ( _matches..., idx, _sqlx, groups ) =>\n        # debug '^546^', rpr sqlx[ idx ... idx + groups.name.length ]\n        { name\n          tail  } = groups\n        #...................................................................................................\n        unless ( declaration = @_sqlx_declarations[ name ] )?\n          ### NOTE should never happen as we always re-compile pattern from declaration keys ###\n          throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@4^', \"unknown name #{rpr name}\"\n        #...................................................................................................\n        if tail.startsWith '('\n          matches     = new_xregex.matchRecursive tail, '\\\\(', '\\\\)', '', \\\n            { escapeChar: '\\\\', unbalanced: 'skip-lazy', valueNames: [ 'ignore', 'left', 'center', 'right', ], }\n          [ left\n            center\n            right   ] = matches\n          tail        = tail[ right.end ... ]\n          values      = @_find_arguments center.value\n          call_arity  = values.length\n        else\n          call_arity  = 0\n        #...................................................................................................\n        unless call_arity is declaration.arity\n          throw new DBay_sqlm_TOBESPECIFIED_error '^dbay/sqlx@5^', \"expected #{declaration.arity} argument(s), got #{call_arity}\"\n        #...................................................................................................\n        R = declaration.body\n        for parameter, idx in declaration.parameters\n          value = values[ idx ]\n          R = R.replace ///#{parameter}///g, value\n        return R + tail\n      break if sql_after is sql_before\n      sql_before = sql_after\n    #.......................................................................................................\n    return sql_after\n\n  #---------------------------------------------------------------------------------------------------------\n  _find_arguments: ( sqlx ) ->\n    sqlx    = sqlx.trim()\n    R       = []\n    #.......................................................................................................\n    level       = 0\n    comma_idxs  = [ { start: null, stop: 0, }, ]\n    for token in sql_lexer.tokenize sqlx\n      switch token.type\n        when 'left_paren'\n          level++\n        when 'right_paren'\n          level--\n        when 'comma'\n          if level is 0\n            comma_idxs.push { start: token.idx, stop: token.idx + token.text.length, }\n        else\n          null\n    comma_idxs.push { start: sqlx.length, stop: null, }\n    #.......................................................................................................\n    for idx in [ 1 ... comma_idxs.length ]\n      start = comma_idxs[ idx - 1 ].stop\n      stop  = comma_idxs[ idx     ].start\n      R.push sqlx[ start ... stop ].trim()\n    #.......................................................................................................\n    R = [] if equals R, [ '', ]\n    return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_function = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  db                = new DBay_sqlx()\n  #.........................................................................................................\n  _test = ( probe, matcher ) ->\n    try\n      sqlx  = probe\n      sql   = db.resolve sqlx\n      help rpr sqlx\n      info rpr sql\n      T?.eq sql, matcher\n    catch error\n      T?.eq \"ERROR\", \"#{error.message}\\n#{rpr probe}\"\n  #.........................................................................................................\n  db.declare SQL\"\"\"@secret_power( @a, @b ) = power( @a, @b ) / @b;\"\"\"\n  db.declare SQL\"\"\"@max( @a, @b ) = case when @a > @b then @a else @b end;\"\"\"\n  db.declare SQL\"\"\"@concat( @first, @second ) = @first || @second;\"\"\"\n  db.declare SQL\"\"\"@intnn() = integer not null;\"\"\"\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @secret_power( 3, 2 );\"\"\"\n    sql   = SQL\"\"\"select power( 3, 2 ) / 2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @max( 3, 2 ) as the_bigger_the_better;\"\"\"\n    sql   = SQL\"\"\"select case when 3 > 2 then 3 else 2 end as the_bigger_the_better;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'here', '\\\\)' );\"\"\"\n    sql   = SQL\"\"\"select 'here' || '\\\\)';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn() primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"\n      create table numbers (\n        n @intnn primary key );\"\"\"\n    sql   = SQL\"\"\"\n      create table numbers (\n        n integer not null primary key );\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', 'b' ) as c1, @concat( 'c', 'd' ) as c2;\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'b' as c1, 'c' || 'd' as c2;\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( 'a', @concat( 'c', 'd' ) );\"\"\"\n    sql   = SQL\"\"\"select 'a' || 'c' || 'd';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  do ->\n    sqlx  = SQL\"\"\"select @concat( ',', @concat( ',', ',' ) );\"\"\"\n    sql   = SQL\"\"\"select ',' || ',' || ',';\"\"\"\n    _test sqlx, sql\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sqlx_find_arguments = ( T, done ) ->\n  # T?.halt_on_error()\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  db                = new DBay_sqlx()\n  _test             = ( probe, matcher ) ->\n    result = db._find_arguments probe\n    help '^43-1^', probe\n    urge '^43-1^', result\n    T?.eq result, matcher\n  _test SQL\"\"\" 3, 2 \"\"\",                      [ '3', '2', ]\n  _test SQL\"\"\" 3, f( 2, 4 ) \"\"\",              [ '3', 'f( 2, 4 )' ]\n  _test SQL\"\"\" 3, f( 2, @g( 4, 5, 6 ) ) \"\"\",  [ '3', 'f( 2, @g( 4, 5, 6 ) )' ]\n  _test SQL\"\"\" 3, 2, \"strange,name\" \"\"\",      [ '3', '2', '\"strange,name\"' ]\n  _test SQL\"\"\"           \"\"\",                 []\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@dbay_sql_lexer = ( T, done ) ->\n  { DBay }          = require H.dbay_path\n  { SQL  }          = DBay\n  lexer             = require '../../../../dbay-sql-lexer'\n  info k for k in ( GUY.props.keys lexer ).sort()\n  #.........................................................................................................\n  show = ( sql, tokens ) ->\n    info rpr sql\n    echo dtab._tabulate tokens\n    return null\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ SQL\"select * from my_table\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'star', text: '*', idx: 7 },\n      { type: 'from', text: 'from', idx: 9 },\n      { type: 'identifier', text: 'my_table', idx: 14 }, ], null ]\n    [ SQL\"select a from my_table\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'identifier', text: 'a', idx: 7 },\n      { type: 'from', text: 'from', idx: 9 },\n      { type: 'identifier', text: 'my_table', idx: 14 }, ], null ]\n    [ SQL\"select 阿 from my_table\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'identifier', text: '阿', idx: 7 },\n      { type: 'from', text: 'from', idx: 9 },\n      { type: 'identifier', text: 'my_table', idx: 14 }, ], null ]\n    [ SQL\"select '阿' as c$\",          [\n      { type: 'select', text: 'select', idx: 0 },\n      { type: 'string', text: '阿', idx: 7 },\n      { type: 'as', text: 'as', idx: 11 },\n      { type: 'identifier', text: 'c$', idx: 14 } ], null ]\n    [ SQL\"42\",                              [ { type: 'number', text: '42', idx: 0 }, ], null ]\n    [ SQL\"( 'text', 'another''text', 42 )\", [ { type: 'left_paren', text: '(', idx: 0 }, { type: 'string', text: 'text', idx: 2 }, { type: 'comma', text: ',', idx: 8 }, { type: 'string', text: \"another'text\", idx: 10 }, { type: 'comma', text: ',', idx: 25 }, { type: 'number', text: '42', idx: 27 }, { type: 'right_paren', text: ')', idx: 30 }, ], null ]\n    [ SQL\"( 'text', @f( 1, 2, 3 ), 42 )\",   [ { type: 'left_paren', text: '(', idx: 0 }, { type: 'string', text: 'text', idx: 2 }, { type: 'comma', text: ',', idx: 8 }, { type: 'unknown', text: '@', idx: 10 }, { type: 'identifier', text: 'f', idx: 11 }, { type: 'left_paren', text: '(', idx: 12 }, { type: 'number', text: '1', idx: 14 }, { type: 'comma', text: ',', idx: 15 }, { type: 'number', text: '2', idx: 17 }, { type: 'comma', text: ',', idx: 18 }, { type: 'number', text: '3', idx: 20 }, { type: 'right_paren', text: ')', idx: 22 }, { type: 'comma', text: ',', idx: 23 }, { type: 'number', text: '42', idx: 25 }, { type: 'right_paren', text: ')', idx: 28 }, ], null ]\n    [ SQL'SELECT 42 as c;',                 [ { type: 'select', text: 'SELECT', idx: 0 }, { type: 'number', text: '42', idx: 7 }, { type: 'as', text: 'as', idx: 10 }, { type: 'identifier', text: 'c', idx: 13 }, { type: 'semicolon', text: ';', idx: 14 }, ], null ]\n    [ SQL\"select 'helo', 'world''';\",       [ { type: 'select', text: 'select', idx: 0 }, { type: 'string', text: 'helo', idx: 7 }, { type: 'comma', text: ',', idx: 13 }, { type: 'string', text: \"world'\", idx: 15 }, { type: 'semicolon', text: ';', idx: 24 }, ], null ]\n    [ SQL\"select 'helo', 'world'''\",        [ { type: 'select', text: 'select', idx: 0 }, { type: 'string', text: 'helo', idx: 7 }, { type: 'comma', text: ',', idx: 13 }, { type: 'string', text: \"world'\", idx: 15 }, ], null ]\n    [ SQL\"this is any text $%§'§\",          [ { type: 'identifier', text: 'this', idx: 0 }, { type: 'operator', text: 'is', idx: 5 }, { type: 'sub_select_op', text: 'any', idx: 8 }, { type: 'identifier', text: 'text', idx: 12 }, { type: 'unknown', text: '$', idx: 17 }, { type: 'unknown', text: '%', idx: 18 }, { type: 'unknown', text: '§', idx: 19 }, { type: 'unknown', text: \"'\", idx: 20 }, { type: 'unknown', text: '§', idx: 21 }, ], null ]\n    [ SQL\"\"\"'a' \"b\" [c] `d` {e}\"\"\",         [\n      { type: 'string',             text: 'a', idx: 0 },\n      { type: 'quoted_identifier',  text: 'b', idx: 4 },\n      { type: 'unknown',            text: '[', idx: 8 },\n      { type: 'identifier',         text: 'c', idx: 9 },\n      { type: 'unknown',            text: ']', idx: 10 },\n      { type: 'identifier',         text: 'd', idx: 12 },\n      { type: 'unknown',            text: '{', idx: 16 },\n      { type: 'identifier',         text: 'e', idx: 17 },\n      { type: 'unknown',            text: '}', idx: 18 },\n      ], null ]\n    [ SQL\"select * from t where t.a between 0 and 1;\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'star',         text: '*',        idx: 7 },\n      { type: 'from',         text: 'from',     idx: 9 },\n      { type: 'identifier',   text: 't',        idx: 14 },\n      { type: 'where',        text: 'where',    idx: 16 },\n      { type: 'identifier',   text: 't',        idx: 22 },\n      { type: 'dot',          text: '.',        idx: 23 },\n      { type: 'identifier',   text: 'a',        idx: 24 },\n      { type: 'between',      text: 'between',  idx: 26 },\n      { type: 'number',       text: '0',        idx: 34 },\n      { type: 'conditional',  text: 'and',      idx: 36 },\n      { type: 'number',       text: '1',        idx: 40 },\n      { type: 'semicolon',    text: ';',        idx: 41 } ], null ]\n    [ SQL\"select * from t where t.a not between 0 and 1;\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'star',         text: '*',        idx: 7 },\n      { type: 'from',         text: 'from',     idx: 9 },\n      { type: 'identifier',   text: 't',        idx: 14 },\n      { type: 'where',        text: 'where',    idx: 16 },\n      { type: 'identifier',   text: 't',        idx: 22 },\n      { type: 'dot',          text: '.',        idx: 23 },\n      { type: 'identifier',   text: 'a',        idx: 24 },\n      { type: 'not',          text: 'not',      idx: 26 },\n      { type: 'between',      text: 'between',  idx: 30 },\n      { type: 'number',       text: '0',        idx: 38 },\n      { type: 'conditional',  text: 'and',      idx: 40 },\n      { type: 'number',       text: '1',        idx: 44 },\n      { type: 'semicolon',    text: ';',        idx: 45 } ], null ]\n    [ SQL\"select * from t where t.a not      between 0 and 1;\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'star',         text: '*',        idx: 7 },\n      { type: 'from',         text: 'from',     idx: 9 },\n      { type: 'identifier',   text: 't',        idx: 14 },\n      { type: 'where',        text: 'where',    idx: 16 },\n      { type: 'identifier',   text: 't',        idx: 22 },\n      { type: 'dot',          text: '.',        idx: 23 },\n      { type: 'identifier',   text: 'a',        idx: 24 },\n      { type: 'not',          text: 'not',      idx: 26 },\n      { type: 'between',      text: 'between',  idx: 35 },\n      { type: 'number',       text: '0',        idx: 43 },\n      { type: 'conditional',  text: 'and',      idx: 45 },\n      { type: 'number',       text: '1',        idx: 49 },\n      { type: 'semicolon',    text: ';',        idx: 50 } ], null ]\n    [ SQL\"a not in ( 'a', 'b', )\", [\n      { type: 'identifier',     text: 'a',      idx: 0 },\n      { type: 'not',            text: 'not',    idx: 2 },\n      { type: 'sub_select_op',  text: 'in',     idx: 6 },\n      { type: 'left_paren',     text: '(',      idx: 9 },\n      { type: 'string',         text: 'a',      idx: 11 },\n      { type: 'comma',          text: ',',      idx: 14 },\n      { type: 'string',         text: 'b',      idx: 16 },\n      { type: 'comma',          text: ',',      idx: 19 },\n      { type: 'right_paren',    text: ')',      idx: 21 } ], null ]\n    [ SQL\"select avg( x )\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'identifier',   text: 'avg',      idx: 7 },\n      { type: 'left_paren',   text: '(',        idx: 10 },\n      { type: 'identifier',   text: 'x',        idx: 12 },\n      { type: 'right_paren',  text: ')',        idx: 14 } ], null ]\n    [ SQL\"select f( x )\", [\n      { type: 'select',       text: 'select',   idx: 0 },\n      { type: 'identifier',   text: 'f',        idx: 7 },\n      { type: 'left_paren',   text: '(',        idx: 8 },\n      { type: 'identifier',   text: 'x',        idx: 10 },\n      { type: 'right_paren',  text: ')',        idx: 12 } ], null ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      result = lexer.tokenize probe\n      show probe, result\n      resolve result\n  #.........................................................................................................\n  done?()\n\n\nmodule.exports = { DBay_sqlx, DBay_sqlm_error, DBay_sqlm_TOBESPECIFIED_error, }\n"
  ]
}