{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,IADF,EAEE,OAFF,EAGE,IAHF,EAIE,IAJF,EAKE,IALF,CAAA,GAK4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAL5B;;EAMA,CAAA,CAAE,GAAF,EACE,IADF,CAAA,GAC4B,GAAG,CAAC,GADhC;;EAEA,MAAM,CAAC,OAAP,GAA4B,KAAA,GAAQ,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EACpC,CAAA,CAAE,OAAF,CAAA,GAA4B,KAA5B,EAdA;;;EAkBA,OAAO,CAAC,gBAAR,CAAyB,QAAA,CAAE,CAAF,CAAA;IACvB,KAAoB,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAApB;AAAA,aAAO,MAAP;;IACA,KAAoB,CAAC,CAAC,MAAtB;AAAA,aAAO,MAAP;;AACA,WAAO;EAHgB,CAAzB,EAlBA;;;EAwBA,OAAO,CAAC,0BAAR,CAAmC,QAAA,CAAE,CAAF,CAAA;IACjC,KAAoB,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAApB;AAAA,aAAO,MAAP;;IACA,IAAgB,CAAC,CAAC,MAAlB;AAAA,aAAO,MAAP;;IACA,KAAoB,CAAC,CAAC,MAAtB;AAAA,aAAO,MAAP;;AACA,WAAO;EAJ0B,CAAnC,EAxBA;;;EA+BA,OAAO,CAAC,mBAAR,CAEE,CAAA;;IAAA,MAAA,EAEE,CAAA;;MAAA,OAAA,EAAkB,4BAAlB;MACA,eAAA,EAAkB;IADlB,CAFF;IAIA,OAAA,EACE;MAAA,OAAA,EAAc;IAAd,CALF;IAMA,MAAA,EAAQ,QAAA,CAAE,GAAF,CAAA;AACV,UAAA;MAAI,CAAA,GAAI,CAAE,GAAA,IAAC,CAAA,QAAQ,CAAC,mBAAmB,CAAC,OAAhC,EAA4C,GAAA,GAA5C;MACJ,KAAgB,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAC,CAAC,OAAb,CAAhB;AAAA,eAAO,EAAP;;MACA,CAAC,CAAC,eAAF,GAAoB,GAAG,CAAC,QAAQ,CAAC,UAAb,CAAwB,CAAC,CAAC,OAA1B,EAAmC;QAAE,MAAA,EAAQ,IAAV;QAAgB,MAAA,EAAQ;MAAxB,CAAnC;AACpB,aAAO;IAJD;EANR,CAFF;AA/BA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'DBAY-SQL-MACROS/types'\n{ rpr\n  echo }                  = GUY.trm\nmodule.exports            = types = new ( require 'intertype' ).Intertype()\n{ declare }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.dbm_global_regex ( x ) ->\n  return false unless @isa.regex x\n  return false unless x.global\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.dbm_nonglobal_sticky_regex ( x ) ->\n  return false unless @isa.regex x\n  return false if x.global\n  return false unless x.sticky\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.dbm_constructor_cfg\n  ### TAINT use `create()` to convert, checks flags of `name_re` ###\n  fields:\n    # name_re:      'text.or.regex'\n    name_re:          'dbm_nonglobal_sticky_regex'\n    _global_name_re:  'dbm_global_regex'\n  default:\n    name_re:      /(?<name>@[\\p{Letter}_][\\p{Letter}_\\d]*)/yu\n  create: ( cfg ) ->\n    R = { @registry.dbm_constructor_cfg.default..., cfg..., }\n    return R unless @isa.regex R.name_re\n    R._global_name_re = GUY.samesame.copy_regex R.name_re, { global: true, sticky: false, }\n    return R\n\n"
  ]
}