{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'DBAY-SQL-MACROS/types'\n{ rpr\n  echo }                  = GUY.trm\n{ escape_for_regex }      = GUY.str\nrx                        = require './regexes'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# escape_for_replacement = ( text ) ->\n#   R = text\n#   R = R.replace /[$]/g,\n\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = ->\n  types       = new ( require 'intertype' ).Intertype()\n  { declare } = types\n\n  #---------------------------------------------------------------------------------------------------------\n  declare.dbm_global_regex ( x ) ->\n    return false unless @isa.regex x\n    return false unless x.global\n    return false if x.sticky\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  declare.dbm_anchored_regex ( x ) ->\n    return false unless @isa.regex x\n    return false if x.global\n    return false if x.sticky\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  declare.dbm_mode ( x ) -> x in [ 'strict', 'practical', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  declare.dbm_constructor_cfg\n    fields:\n      prefix:               'nonempty.text'\n      escape:               'nonempty.text'\n      vanish:               'nonempty.text'\n      mode:                 'dbm_mode'\n      _any_name_re:         'regex'\n      _bare_name_re:        'dbm_global_regex'\n      _paren_name_re:       'dbm_global_regex'\n      _start_paren_name_re: 'dbm_anchored_regex'\n      _escaped_prefix_re:   'dbm_global_regex'\n      _prefix_esc:          'nonempty.text'\n      _escape_esc:          'nonempty.text'\n      _vanish_esc:          'nonempty.text'\n    default:\n      prefix:               '@'\n      # escape:               '\\\\'\n      escape:               '%'\n      vanish:               '|'\n      mode:                 'practical'\n      # _any_name_re:              /[\\p{Letter}_][\\p{Letter}_\\d]*/u\n      ### this regex lifted from Intertype@0.105.1/declarations ###\n      _prefix_esc:          null\n      _escape_esc:          null\n      _vanish_esc:          null\n      _any_name_re:         null\n      _bare_name_re:        null\n      _paren_name_re:       null\n      _start_paren_name_re: null\n      _escaped_prefix_re:   null\n      # _global_name_re:  null\n    create: ( cfg ) ->\n      R = { @registry.dbm_constructor_cfg.default..., cfg..., }\n      return R unless @isa.nonempty.text R.prefix\n      #.....................................................................................................\n      return R if R._prefix_esc?\n      return R if R._escape_esc?\n      return R if R._vanish_esc?\n      return R if R._any_name_re?\n      return R if R._bare_name_re?\n      return R if R._paren_name_re?\n      return R if R._start_paren_name_re?\n      return R if R._escaped_prefix_re?\n      #.....................................................................................................\n      ### TAINT harmonize naming, use either `re` or `rx` ###\n      R._prefix_esc           = escape_for_regex R.prefix\n      R._escape_esc           = escape_for_regex R.escape\n      R._vanish_esc           = escape_for_regex R.vanish\n      R._any_name_re          = rx.get_rx_for_any_name          R\n      R._bare_name_re         = rx.get_rx_for_bare_name         R\n      R._paren_name_re        = rx.get_rx_for_paren_name        R\n      R._start_paren_name_re  = rx.get_rx_for_start_paren_name  R\n      R._escaped_prefix_re    = /// #{R._escape_esc} #{R._prefix_esc} ///gu\n      #.....................................................................................................\n      declare.dbm_parameter_list ( x ) ->\n        return false unless @isa.list.of.nonempty.text x\n        return false unless x.every ( p ) -> ( p.match R._bare_name_re )?\n        return true\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n"
  ]
}