{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,UAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,IADF,EAEE,OAFF,EAGE,IAHF,EAIE,IAJF,EAKE,IALF,CAAA,GAK4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAL5B;;EAMA,CAAA,CAAE,GAAF,EACE,IADF,CAAA,GAC4B,GAAG,CAAC,GADhC;;EAEA,CAAA,CAAE,gBAAF,CAAA,GAA4B,GAAG,CAAC,GAAhC;;EACA,CAAA,CAAE,UAAF,CAAA,GAA4B,GAAG,CAAC,QAAhC;;EACA,MAAM,CAAC,OAAP,GAA4B,KAAA,GAAQ,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EACpC,CAAA,CAAE,OAAF,CAAA,GAA4B,KAA5B,EAhBA;;;EAoBA,OAAO,CAAC,gBAAR,CAAyB,QAAA,CAAE,CAAF,CAAA;IACvB,KAAoB,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAApB;AAAA,aAAO,MAAP;;IACA,KAAoB,CAAC,CAAC,MAAtB;AAAA,aAAO,MAAP;;IACA,KAAoB,CAAC,CAAC,MAAtB;AAAA,aAAO,MAAP;;AACA,WAAO;EAJgB,CAAzB,EApBA;;;EA2BA,OAAO,CAAC,0BAAR,CAAmC,QAAA,CAAE,CAAF,CAAA;IACjC,KAAoB,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAApB;AAAA,aAAO,MAAP;;IACA,IAAgB,CAAC,CAAC,MAAlB;AAAA,aAAO,MAAP;;IACA,KAAoB,CAAC,CAAC,MAAtB;AAAA,aAAO,MAAP;;AACA,WAAO;EAJ0B,CAAnC,EA3BA;;;;;;;;;;;;EA2CA,OAAO,CAAC,mBAAR,CAEE,CAAA;;IAAA,MAAA,EAGE,CAAA;;;MAAA,MAAA,EAAkB,eAAlB;MACA,OAAA,EAAkB,OADlB;MAEA,aAAA,EAAkB,OAFlB;MAGA,cAAA,EAAkB,OAHlB;MAIA,eAAA,EAAkB;IAJlB,CAHF;;IASA,OAAA,EAGE,CAAA;;;MAAA,MAAA,EAAkB,GAAlB;MACA,OAAA,EAAkB,gCADlB;MAEA,aAAA,EAAkB,IAFlB;MAGA,cAAA,EAAkB,IAHlB;MAIA,eAAA,EAAkB;IAJlB,CAZF;;IAkBA,MAAA,EAAQ,QAAA,CAAE,GAAF,CAAA;AACV,UAAA,CAAA,EAAA,OAAA,EAAA;MAAI,CAAA,GAAI,CAAE,GAAA,IAAC,CAAA,QAAQ,CAAC,mBAAmB,CAAC,OAAhC,EAA4C,GAAA,GAA5C;MACJ,KAAgB,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAAmB,CAAC,CAAC,MAArB,CAAhB;AAAA,eAAO,EAAP;;MACA,KAAgB,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAC,CAAC,OAAb,CAAhB;AAAA,eAAO,EAAP;;MACA,MAAA,GAAsB,gBAAA,CAAiB,CAAC,CAAC,MAAnB;MACtB,OAAA,GAAsB,CAAC,CAAC,OAAO,CAAC;MAChC,CAAC,CAAC,aAAF,GAAsB,MAAA,CAAA,CAAA,CAAA,CAAM,MAAN,CAAA,CAAA,CAAgB,OAAhB,CAAA,UAAA,CAAA,EAAyC,KAAzC;MACtB,CAAC,CAAC,cAAF,GAAsB,MAAA,CAAA,CAAA,CAAA,CAAM,MAAN,CAAA,CAAA,CAAgB,OAAhB,CAAA,GAAA,CAAA,EAA+B,KAA/B;MACtB,CAAC,CAAC,eAAF,GAAsB,UAAA,CAAW,CAAC,CAAC,aAAb,EAA4B;QAAE,MAAA,EAAQ,IAAV;QAAgB,MAAA,EAAQ,IAAxB;QAA8B,MAAA,EAAQ;MAAtC,CAA5B,EAP1B;;AASI,aAAO;IAVD;EAlBR,CAFF;AA3CA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  whisper\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'DBAY-SQL-MACROS/types'\n{ rpr\n  echo }                  = GUY.trm\n{ escape_for_regex }      = GUY.str\n{ copy_regex }            = GUY.samesame\nmodule.exports            = types = new ( require 'intertype' ).Intertype()\n{ declare }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.dbm_global_regex ( x ) ->\n  return false unless @isa.regex x\n  return false unless x.global\n  return false unless x.sticky\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.dbm_nonglobal_sticky_regex ( x ) ->\n  return false unless @isa.regex x\n  return false if x.global\n  return false unless x.sticky\n  return true\n\n# #-----------------------------------------------------------------------------------------------------------\n# ### TAINT must adapt lexer in order to allow for configurable brackets ###\n# declare.dbm_brackets ( x ) ->\n#   return false unless @isa.list x\n#   return false unless x.length is 2\n#   return false unless @isa.nonempty.text x[ 0 ]\n#   return false unless @isa.nonempty.text x[ 1 ]\n#   return true\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare.dbm_constructor_cfg\n  ### TAINT use `create()` to convert, checks flags of `name_re` ###\n  fields:\n    # name_re:          'dbm_nonglobal_sticky_regex'\n    # name_re:          'dbm_global_regex'\n    prefix:           'nonempty.text'\n    name_re:          'regex'\n    _bare_name_re:    'regex'\n    _name_paren_re:   'regex'\n    _global_name_re:  'regex'\n    # brackets:         'dbm_brackets'\n  default:\n    ### TAINT see TAINT ^hardwired-sigil^ in main.coffee ###\n    ### TAINT should accept sigil, name_re as distinct `cfg` settings ###\n    prefix:           '@'\n    name_re:          /[\\p{Letter}_][\\p{Letter}_\\d]*/u\n    _bare_name_re:    null\n    _name_paren_re:   null\n    _global_name_re:  null\n    # brackets:         [ '(', ')', ]\n  create: ( cfg ) ->\n    R = { @registry.dbm_constructor_cfg.default..., cfg..., }\n    return R unless @isa.nonempty.text R.prefix\n    return R unless @isa.regex R.name_re\n    prefix              = escape_for_regex R.prefix\n    name_re             = R.name_re.source\n    R._bare_name_re     = /// #{prefix} #{name_re} \\b (?! [(] ) ///ysu\n    R._name_paren_re    = /// #{prefix} #{name_re} \\( ///ysu\n    R._global_name_re   = copy_regex R._bare_name_re, { global: true, dotAll: true, sticky: false, }\n    # R._global_name_re = copy_regex R.name_re, { global: true, }\n    return R\n\n"
  ]
}